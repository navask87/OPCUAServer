/******************************************************************************
**
** <auto-generated>
**     This code was generated by a tool: UaModeler
**     Runtime Version: 1.7.1, using .NET Client 4.1.0 template (version 1)
**
**     Changes to this file may cause incorrect behavior and will be lost if
**     the code is regenerated.
** </auto-generated>
**
** Copyright (c) 2006-2025 Unified Automation GmbH All rights reserved.
**
** Software License Agreement ("SLA") Version 2.8
**
** Unless explicitly acquired and licensed from Licensor under another
** license, the contents of this file are subject to the Software License
** Agreement ("SLA") Version 2.8, or subsequent versions
** as allowed by the SLA, and You may not copy or use this file in either
** source code or executable form, except in compliance with the terms and
** conditions of the SLA.
**
** All software distributed under the SLA is provided strictly on an
** "AS IS" basis, WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESS OR IMPLIED,
** AND LICENSOR HEREBY DISCLAIMS ALL SUCH WARRANTIES, INCLUDING WITHOUT
** LIMITATION, ANY WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR
** PURPOSE, QUIET ENJOYMENT, OR NON-INFRINGEMENT. See the SLA for specific
** language governing rights and limitations under the SLA.
**
** Project: .NET OPC UA SDK information model for namespace http://se.com/BuildingAutomation/
**
** Description: OPC Unified Architecture Software Development Kit.
**
** The complete license agreement can be found here:
** http://unifiedautomation.com/License/SLA/2.8/
**
** Created: 05.07.2025
**
******************************************************************************/

using System;
using System.Collections.Generic;
using System.Text;
using System.Reflection;
using System.Xml;
using System.Runtime.Serialization;
using UnifiedAutomation.UaBase;

namespace SE.BA
{
    #region DataType Identifiers
    /// <summary>
    /// A class that declares constants for all DataTypes in the Model.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("UaModeler", "1.7.1")]
    public static partial class DataTypes
    {
    }
    #endregion

    #region Object Identifiers
    /// <summary>
    /// A class that declares constants for all Objects in the Model.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("UaModeler", "1.7.1")]
    public static partial class Objects
    {
    }
    #endregion

    #region ObjectType Identifiers
    /// <summary>
    /// A class that declares constants for all ObjectTypes in the Model.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("UaModeler", "1.7.1")]
    public static partial class ObjectTypes
    {
        /// <summary>
        /// The identifier for the ControllerEventType ObjectType.
        /// </summary>
        public const uint ControllerEventType = 1004;

        /// <summary>
        /// The identifier for the ControllerType ObjectType.
        /// </summary>
        public const uint ControllerType = 1001;

        /// <summary>
        /// The identifier for the AirConditionerControllerType ObjectType.
        /// </summary>
        public const uint AirConditionerControllerType = 1003;

    }
    #endregion

    #region Method Identifiers
    /// <summary>
    /// A class that declares constants for all Methods in the Model.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("UaModeler", "1.7.1")]
    public static partial class Methods
    {
        /// <summary>
        /// The identifier for the StartWithSetPoint Method.
        /// </summary>
        public const uint AirConditionerControllerType_StartWithSetPoint = 7003;

        /// <summary>
        /// The identifier for the Start Method.
        /// </summary>
        public const uint ControllerType_Start = 7001;

        /// <summary>
        /// The identifier for the Stop Method.
        /// </summary>
        public const uint ControllerType_Stop = 7002;

    }
    #endregion

    #region ReferenceType Identifiers
    /// <summary>
    /// A class that declares constants for all ReferenceTyped in the Model.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("UaModeler", "1.7.1")]
    public static partial class ReferenceTypes
    {
    }
    #endregion

    #region Variable Identifiers
    /// <summary>
    /// A class that declares constants for all Variables in the Model.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("UaModeler", "1.7.1")]
    public static partial class Variables
    {
        /// <summary>
        /// The identifier for the State Variable.
        /// </summary>
        public const uint ControllerEventType_State = 6012;

        /// <summary>
        /// The identifier for the Temperature Variable.
        /// </summary>
        public const uint ControllerEventType_Temperature = 6011;

        /// <summary>
        /// The identifier for the Humidity Variable.
        /// </summary>
        public const uint AirConditionerControllerType_Humidity = 6008;

        /// <summary>
        /// The identifier for the HumiditySetPoint Variable.
        /// </summary>
        public const uint AirConditionerControllerType_HumiditySetPoint = 6010;

        /// <summary>
        /// The identifier for the InputArguments Variable.
        /// </summary>
        public const uint AirConditionerControllerType_StartWithSetPoint_InputArguments = 6009;

        /// <summary>
        /// The identifier for the PowerConsumption Variable.
        /// </summary>
        public const uint ControllerType_PowerConsumption = 6004;

        /// <summary>
        /// The identifier for the State Variable.
        /// </summary>
        public const uint ControllerType_State = 6001;

        /// <summary>
        /// The identifier for the Temperature Variable.
        /// </summary>
        public const uint ControllerType_Temperature = 6002;

        /// <summary>
        /// The identifier for the EURange Variable.
        /// </summary>
        public const uint ControllerType_Temperature_EURange = 6005;

        /// <summary>
        /// The identifier for the TemperatureSetPoint Variable.
        /// </summary>
        public const uint ControllerType_TemperatureSetPoint = 6003;

        /// <summary>
        /// The identifier for the EURange Variable.
        /// </summary>
        public const uint ControllerType_TemperatureSetPoint_EURange = 6006;

    }
    #endregion

    #region VariableTypes Identifiers
    /// <summary>
    /// A class that declares constants for all VariableTypes in the Model.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("UaModeler", "1.7.1")]
    public static partial class VariableTypes
    {
    }
    #endregion

    #region DataType Node Identifiers
    /// <summary>
    /// A class that declares ExpandedNodeIds for all DataTypes in the Model.
    /// </summary>
    /// <remarks>
    /// Call ExpandedNodeId.ToNodeId to use these constants.
    /// </remarks>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("UaModeler", "1.7.1")]
    public static partial class DataTypeIds
    {
    }
    #endregion

    #region Method Node Identifiers
    /// <summary>
    /// A class that declares ExpandedNodeIds for all Methods in the Model.
    /// </summary>
    /// <remarks>
    /// Call ExpandedNodeId.ToNodeId to use these constants.
    /// </remarks>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("UaModeler", "1.7.1")]
    public static partial class MethodIds
    {
        /// <summary>
        /// The identifier for the AirConditionerControllerType_StartWithSetPoint Method.
        /// </summary>
        public static readonly ExpandedNodeId AirConditionerControllerType_StartWithSetPoint = new ExpandedNodeId(Methods.AirConditionerControllerType_StartWithSetPoint, Namespaces.BA);

        /// <summary>
        /// The identifier for the ControllerType_Start Method.
        /// </summary>
        public static readonly ExpandedNodeId ControllerType_Start = new ExpandedNodeId(Methods.ControllerType_Start, Namespaces.BA);

        /// <summary>
        /// The identifier for the ControllerType_Stop Method.
        /// </summary>
        public static readonly ExpandedNodeId ControllerType_Stop = new ExpandedNodeId(Methods.ControllerType_Stop, Namespaces.BA);

    }
    #endregion

    #region Object Node Identifiers
    /// <summary>
    /// A class that declares ExpandedNodeIds for all Objects in the Model.
    /// </summary>
    /// <remarks>
    /// Call ExpandedNodeId.ToNodeId to use these constants.
    /// </remarks>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("UaModeler", "1.7.1")]
    public static partial class ObjectIds
    {
    }
    #endregion

    #region ObjectType Node Identifiers
    /// <summary>
    /// A class that declares ExpandedNodeIds for all Objects in the Model.
    /// </summary>
    /// <remarks>
    /// Call ExpandedNodeId.ToNodeId to use these constants.
    /// </remarks>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("UaModeler", "1.7.1")]
    public static partial class ObjectTypeIds
    {
        /// <summary>
        /// The identifier for the ControllerEventType ObjectType.
        /// </summary>
        public static readonly ExpandedNodeId ControllerEventType = new ExpandedNodeId(ObjectTypes.ControllerEventType, Namespaces.BA);

        /// <summary>
        /// The identifier for the ControllerType ObjectType.
        /// </summary>
        public static readonly ExpandedNodeId ControllerType = new ExpandedNodeId(ObjectTypes.ControllerType, Namespaces.BA);

        /// <summary>
        /// The identifier for the AirConditionerControllerType ObjectType.
        /// </summary>
        public static readonly ExpandedNodeId AirConditionerControllerType = new ExpandedNodeId(ObjectTypes.AirConditionerControllerType, Namespaces.BA);

    }
    #endregion

    #region ReferenceType Node Identifiers
    /// <summary>
    /// A class that declares ExpandedNodeIds for all ReferenceTypes in the Model.
    /// </summary>
    /// <remarks>
    /// Call ExpandedNodeId.ToNodeId to use these constants.
    /// </remarks>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("UaModeler", "1.7.1")]
    public static partial class ReferenceTypeIds
    {
    }
    #endregion

    #region Variable Node Identifiers
    /// <summary>
    /// A class that declares ExpandedNodeIds for all Variables in the Model.
    /// </summary>
    /// <remarks>
    /// Call ExpandedNodeId.ToNodeId to use these constants.
    /// </remarks>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("UaModeler", "1.7.1")]
    public static partial class VariableIds
    {
        /// <summary>
        /// The identifier for the ControllerEventType_State Variable.
        /// </summary>
        public static readonly ExpandedNodeId ControllerEventType_State = new ExpandedNodeId(Variables.ControllerEventType_State, Namespaces.BA);

        /// <summary>
        /// The identifier for the ControllerEventType_Temperature Variable.
        /// </summary>
        public static readonly ExpandedNodeId ControllerEventType_Temperature = new ExpandedNodeId(Variables.ControllerEventType_Temperature, Namespaces.BA);

        /// <summary>
        /// The identifier for the AirConditionerControllerType_Humidity Variable.
        /// </summary>
        public static readonly ExpandedNodeId AirConditionerControllerType_Humidity = new ExpandedNodeId(Variables.AirConditionerControllerType_Humidity, Namespaces.BA);

        /// <summary>
        /// The identifier for the AirConditionerControllerType_HumiditySetPoint Variable.
        /// </summary>
        public static readonly ExpandedNodeId AirConditionerControllerType_HumiditySetPoint = new ExpandedNodeId(Variables.AirConditionerControllerType_HumiditySetPoint, Namespaces.BA);

        /// <summary>
        /// The identifier for the AirConditionerControllerType_StartWithSetPoint_InputArguments Variable.
        /// </summary>
        public static readonly ExpandedNodeId AirConditionerControllerType_StartWithSetPoint_InputArguments = new ExpandedNodeId(Variables.AirConditionerControllerType_StartWithSetPoint_InputArguments, Namespaces.BA);

        /// <summary>
        /// The identifier for the ControllerType_PowerConsumption Variable.
        /// </summary>
        public static readonly ExpandedNodeId ControllerType_PowerConsumption = new ExpandedNodeId(Variables.ControllerType_PowerConsumption, Namespaces.BA);

        /// <summary>
        /// The identifier for the ControllerType_State Variable.
        /// </summary>
        public static readonly ExpandedNodeId ControllerType_State = new ExpandedNodeId(Variables.ControllerType_State, Namespaces.BA);

        /// <summary>
        /// The identifier for the ControllerType_Temperature Variable.
        /// </summary>
        public static readonly ExpandedNodeId ControllerType_Temperature = new ExpandedNodeId(Variables.ControllerType_Temperature, Namespaces.BA);

        /// <summary>
        /// The identifier for the ControllerType_Temperature_EURange Variable.
        /// </summary>
        public static readonly ExpandedNodeId ControllerType_Temperature_EURange = new ExpandedNodeId(Variables.ControllerType_Temperature_EURange, Namespaces.BA);

        /// <summary>
        /// The identifier for the ControllerType_TemperatureSetPoint Variable.
        /// </summary>
        public static readonly ExpandedNodeId ControllerType_TemperatureSetPoint = new ExpandedNodeId(Variables.ControllerType_TemperatureSetPoint, Namespaces.BA);

        /// <summary>
        /// The identifier for the ControllerType_TemperatureSetPoint_EURange Variable.
        /// </summary>
        public static readonly ExpandedNodeId ControllerType_TemperatureSetPoint_EURange = new ExpandedNodeId(Variables.ControllerType_TemperatureSetPoint_EURange, Namespaces.BA);

    }
    #endregion

    #region VariableType Node Identifiers
    /// <summary>
    /// A class that declares ExpandedNodeIds for all VariableType in the Model.
    /// </summary>
    /// <remarks>
    /// Call ExpandedNodeId.ToNodeId to use these constants.
    /// </remarks>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("UaModeler", "1.7.1")]
    public static partial class VariableTypeIds
    {
    }
    #endregion

    #region BrowseName Declarations
    /// <summary>
    /// Declares all of the BrowseNames used in the Model.
    /// </summary>
    public static partial class BrowseNames
    {
        /// <summary>
        /// The BrowseName for the AirConditionerControllerType component.
        /// </summary>
        public const string AirConditionerControllerType = "AirConditionerControllerType";
        /// <summary>
        /// The BrowseName for the ControllerEventType component.
        /// </summary>
        public const string ControllerEventType = "ControllerEventType";
        /// <summary>
        /// The BrowseName for the ControllerType component.
        /// </summary>
        public const string ControllerType = "ControllerType";
        /// <summary>
        /// The BrowseName for the Humidity component.
        /// </summary>
        public const string Humidity = "Humidity";
        /// <summary>
        /// The BrowseName for the HumiditySetPoint component.
        /// </summary>
        public const string HumiditySetPoint = "HumiditySetPoint";
        /// <summary>
        /// The BrowseName for the PowerConsumption component.
        /// </summary>
        public const string PowerConsumption = "PowerConsumption";
        /// <summary>
        /// The BrowseName for the Start component.
        /// </summary>
        public const string Start = "Start";
        /// <summary>
        /// The BrowseName for the StartWithSetPoint component.
        /// </summary>
        public const string StartWithSetPoint = "StartWithSetPoint";
        /// <summary>
        /// The BrowseName for the State component.
        /// </summary>
        public const string State = "State";
        /// <summary>
        /// The BrowseName for the Stop component.
        /// </summary>
        public const string Stop = "Stop";
        /// <summary>
        /// The BrowseName for the Temperature component.
        /// </summary>
        public const string Temperature = "Temperature";
        /// <summary>
        /// The BrowseName for the TemperatureSetPoint component.
        /// </summary>
        public const string TemperatureSetPoint = "TemperatureSetPoint";
    }
    #endregion

    #region AbsolueName Declarations
    /// <summary>
    /// Declares all of the BrowseNames used in the Model.
    /// </summary>
    public static partial class AbsoluteNames
    {
        /// <summary>
        /// The AbsoluteName for the AirConditionerControllerType component.
        /// </summary>
        public static readonly AbsoluteName AirConditionerControllerType = new AbsoluteName(BrowseNames.AirConditionerControllerType, Namespaces.BA);
        /// <summary>
        /// The AbsoluteName for the ControllerEventType component.
        /// </summary>
        public static readonly AbsoluteName ControllerEventType = new AbsoluteName(BrowseNames.ControllerEventType, Namespaces.BA);
        /// <summary>
        /// The AbsoluteName for the ControllerType component.
        /// </summary>
        public static readonly AbsoluteName ControllerType = new AbsoluteName(BrowseNames.ControllerType, Namespaces.BA);
        /// <summary>
        /// The AbsoluteName for the Humidity component.
        /// </summary>
        public static readonly AbsoluteName Humidity = new AbsoluteName(BrowseNames.Humidity, Namespaces.BA);
        /// <summary>
        /// The AbsoluteName for the HumiditySetPoint component.
        /// </summary>
        public static readonly AbsoluteName HumiditySetPoint = new AbsoluteName(BrowseNames.HumiditySetPoint, Namespaces.BA);
        /// <summary>
        /// The AbsoluteName for the PowerConsumption component.
        /// </summary>
        public static readonly AbsoluteName PowerConsumption = new AbsoluteName(BrowseNames.PowerConsumption, Namespaces.BA);
        /// <summary>
        /// The AbsoluteName for the Start component.
        /// </summary>
        public static readonly AbsoluteName Start = new AbsoluteName(BrowseNames.Start, Namespaces.BA);
        /// <summary>
        /// The AbsoluteName for the StartWithSetPoint component.
        /// </summary>
        public static readonly AbsoluteName StartWithSetPoint = new AbsoluteName(BrowseNames.StartWithSetPoint, Namespaces.BA);
        /// <summary>
        /// The AbsoluteName for the State component.
        /// </summary>
        public static readonly AbsoluteName State = new AbsoluteName(BrowseNames.State, Namespaces.BA);
        /// <summary>
        /// The AbsoluteName for the Stop component.
        /// </summary>
        public static readonly AbsoluteName Stop = new AbsoluteName(BrowseNames.Stop, Namespaces.BA);
        /// <summary>
        /// The AbsoluteName for the Temperature component.
        /// </summary>
        public static readonly AbsoluteName Temperature = new AbsoluteName(BrowseNames.Temperature, Namespaces.BA);
        /// <summary>
        /// The AbsoluteName for the TemperatureSetPoint component.
        /// </summary>
        public static readonly AbsoluteName TemperatureSetPoint = new AbsoluteName(BrowseNames.TemperatureSetPoint, Namespaces.BA);
    }
    #endregion

    #region Namespace Declarations
    /// <summary>
    /// Defines constants for all namespaces referenced by the Model.
    /// </summary>
    public static partial class Namespaces
    {
        /// <summary>
        /// The URI for the OpcUa namespace (.NET code namespace is 'Opc.Ua').
        /// </summary>
        public const string OpcUa = "http://opcfoundation.org/UA/";

        /// <summary>
        /// The URI for the OpcUaXsd namespace (.NET code namespace is 'Opc.Ua').
        /// </summary>
        public const string OpcUaXsd = "http://opcfoundation.org/UA/2008/02/Types.xsd";

        /// <summary>
        /// The URI for the BA namespace.
        /// </summary>
        public const string BA = "http://se.com/BuildingAutomation/";

        /// <summary>
        /// The URI for the BAXsd namespace.
        /// </summary>
        public const string BAXsd = "http://se.com/BuildingAutomation/Types.xsd";
    }
    #endregion
}

